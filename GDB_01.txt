Deve-se primeiramente compilar o código com informações de depuração

>$ gcc -g -o seu_programa seu_programa.c


E em seguida pode-se executar o programa no ambiente com 

>$ gdb seu_programa



O GDB irá executar e ficar esperando comandos, então é possível adicionar breakpoints com o nome de uma função específica ou com a linha desejada.


>$ break funcao_alvo

>$ break 42


Com o comando run o programa executa até a próxiam linha do breakpoints

>$ run


É possível visualizar variáveis com o comando primeiramente

>$ print variavel_alvo

Continue vai até o próximo breakpoint e quit encerra o ambiente


>$ continue

>$ quit


O step avança de linha em linha, o next também avança de linha em linha, mas chamadas de funções ele considera como uma linha só e o continue avança até o próximo breakpoint.


Sobre debugging de programação paralela:

Ao colocar o breakpoint em um função de thread, todas serão paradas.

Ainda é possível colocar um breakpoint condicional, em que só a thread especificada será parada (voltar nisso depois)


Para informar as threads ativas, deve-se utilizar o comando:
            info threads

Para alternar para uma thread específica, pode-se usar:

            thread num   -> onde num é o número da thread listada pelo info threads

As informações das variáveis locais e o TID podem ser mostradas com

            info locals

O info threads também mostra qual thread possui o controle da execução no momento com um asterísco do lado.


